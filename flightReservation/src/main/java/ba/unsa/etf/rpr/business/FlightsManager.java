package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Flights;
import ba.unsa.etf.rpr.exceptions.FlightBookingException;

import java.util.List;

public class FlightsManager {


    public void validateSourceName(String name)throws FlightBookingException{
        if(name == null || name.length() > 30 || name.length() < 3){
            throw new FlightBookingException("Source name must be between 3 and 30 characters");
        }
    }

    public void validateDestinationName(String name)throws FlightBookingException{
        if(name == null || name.length() > 30 || name.length() < 3){
            throw new FlightBookingException("Destination name must be between 3 and 30 characters");
        }
    }

    public void validateSeats(int numberOfSeats)throws FlightBookingException{
        if(numberOfSeats < 20 || numberOfSeats > 853){
            throw new FlightBookingException("Number of seats must be between 20 and 853");
        }
    }
    public Flights add(Flights flight)throws FlightBookingException{
        if(flight.getId() != 0){
            throw new FlightBookingException("Can't add flight with ID. ID is autogenerated");
        }
        try {
            return  DaoFactory.flightsDao().add(flight);
        }catch (FlightBookingException f){
            throw f;
        }
    }

    public void delete(int flightId)throws FlightBookingException{
    try {
        DaoFactory.flightsDao().delete(flightId);
    }catch(FlightBookingException f){
        if(f.getMessage().contains("FOREIGN KEY")){
            throw new FlightBookingException("Cannot delete category which is related to quotes. First delete related quotes before deleting category.");
        }
        throw f;
    }
    }

    public Flights update(Flights flight)throws FlightBookingException{
        return DaoFactory.flightsDao().update(flight);
    }

    public List<Flights> getAll() throws FlightBookingException {
        return DaoFactory.flightsDao().getAll();
    }

    public Flights getById(int id) throws FlightBookingException {
        return DaoFactory.flightsDao().getById(id);
    }

    public List<Flights>searchBySourceAndDestination(String source,String destination) throws FlightBookingException {
        return DaoFactory.flightsDao().searchBySourceAndDestination(source,destination);
    }

}