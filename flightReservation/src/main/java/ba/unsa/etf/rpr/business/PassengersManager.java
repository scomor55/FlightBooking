package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Flights;
import ba.unsa.etf.rpr.domain.Passengers;
import ba.unsa.etf.rpr.exceptions.FlightBookingException;
import java.util.List;

public class PassengersManager {

    public void validatePassengerName(String name) throws FlightBookingException{
        if(name == null || name.length() > 20 || name.length() < 3){
            throw new FlightBookingException("Passenger name must be between 3 and 20 characters long");
        }
    }
    public void validatePassengerSurname(String surname) throws FlightBookingException{
        if(surname == null || surname.length() > 20 || surname.length() < 3){
            throw new FlightBookingException("Passenger surname must be between 3 and 20 characters long");
        }
    }

    public void validatePassengerAddress(String address) throws FlightBookingException{
        if(address == null || address.length() > 20 || address.length() < 3){
            throw new FlightBookingException("Passenger address must be between 3 and 20 characters long");
        }
    }
    public Passengers add(Passengers passengers)throws FlightBookingException{
        if(passengers.getId() != 0){
            throw new FlightBookingException("Can't add passenger with ID. ID is autogenerated");
        }
        try {
            return  DaoFactory.passengersDao().add(passengers);
        }catch (FlightBookingException p){
            throw p;
        }
    }

    public void delete(int passengerId)throws FlightBookingException{
        try {
            DaoFactory.passengersDao().delete(passengerId);
        }catch(FlightBookingException f){
            if(f.getMessage().contains("FOREIGN KEY")){
                throw new FlightBookingException("Cannot delete category which is related to quotes. First delete related quotes before deleting category.");
            }
            throw f;
        }
    }

    public Passengers update(Passengers passengers)throws FlightBookingException{
        return DaoFactory.passengersDao().update(passengers);
    }

    public List<Passengers> getAll() throws FlightBookingException {
        return DaoFactory.passengersDao().getAll();
    }

    public Passengers getById(int id) throws FlightBookingException {
        return DaoFactory.passengersDao().getById(id);
    }

}
