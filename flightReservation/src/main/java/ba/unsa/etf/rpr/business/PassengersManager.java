package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Flights;
import ba.unsa.etf.rpr.domain.Passengers;
import ba.unsa.etf.rpr.exceptions.FlightBookingException;
import javafx.scene.control.Alert;

import java.util.List;
/**
 * The PassengersManager class provides functionality for managing passengers.
 * It has functions for validating passengers information,
 * adding new passengers, updating existing passengers, deleting passengers and getting all passengers or passenger by id.
 * It uses DaoFactory class to interact with data storage.
 * @author Safet ÄŒomor
 */
public class PassengersManager {
    /**
     * Validates passenger's name. If the name is null or length is not between 3 and 20 characters long, throws FlightBookingException with message "Passenger name must be between 3 and 20 characters long".
     * @param name String name of the passenger to be validated.
     * @throws FlightBookingException if the name is null or length is not between 3 and 20 characters long.
     */
    public void validatePassengerName(String name) throws FlightBookingException{
        if(name == null || name.length() > 20 || name.length() < 3){
            throw new FlightBookingException("Passenger name must be between 3 and 20 characters long");
        }
    }
    /**
     * Validates passenger's surname. If the surname is null or length is not between 3 and 20 characters long, throws FlightBookingException with message "Passenger surname must be between 3 and 20 characters long".
     * @param surname String surname of the passenger to be validated.
     * @throws FlightBookingException if the surname is null or length is not between 3 and 20 characters long.
     */
    public void validatePassengerSurname(String surname) throws FlightBookingException{
        if(surname == null || surname.length() > 20 || surname.length() < 3){
            throw new FlightBookingException("Passenger surname must be between 3 and 20 characters long");
        }
    }
    /**
     * Validates passenger's address. If the address is null or length is not between 3 and 20 characters long, throws FlightBookingException with message "Passenger address must be between 3 and 20 characters long".
     * @param address String address of the passenger to be validated.
     * @throws FlightBookingException if the address is null or length is not between 3 and 20 characters long.
     */
    public void validatePassengerAddress(String address) throws FlightBookingException{
        if(address == null || address.length() > 20 || address.length() < 3){
            throw new FlightBookingException("Passenger address must be between 3 and 20 characters long");
        }
    }
    /**
     * Adds new passenger to the data storage.
     * If the passenger's id is not 0, throws FlightBookingException with message "Can't add passenger with ID. ID is autogenerated".
     * @param passengers Passengers object representing the passenger to be added.
     * @return Passengers object representing the newly added passenger.
     * @throws FlightBookingException if the passenger's id is not 0.
     */
    public Passengers add(Passengers passengers)throws FlightBookingException{
        if(passengers.getId() != 0){
            throw new FlightBookingException("Can't add passenger with ID. ID is autogenerated");
        }
        try {
            return  DaoFactory.passengersDao().add(passengers);
        }catch (FlightBookingException p){
            throw p;
        }
    }
    /**
     * Deletes the passenger with given id from the data storage.
     * If the passenger with given id has tickets, shows an error alert with message "You have to delete tickets of this passenger !".
     * @param passengerId Integer id of the passenger to be deleted.
     * @throws FlightBookingException if there is some other error during deletion.
     */
    public void delete(int passengerId)throws FlightBookingException{
        try {
            DaoFactory.passengersDao().delete(passengerId);
        }catch(FlightBookingException f){
            if(f.getMessage().contains("FOREIGN KEY")){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Tickets undeleted");
                alert.setContentText("You have to delete tickets of this passenger !");
                alert.showAndWait();
            }
        }
    }
    /**
     * Method update updates a record of passengers in the database.
     * @param passengers an instance of {@link Passengers}
     * @return an instance of {@link Passengers} updated successfully.
     * @throws FlightBookingException when an error occurs during the update operation.
     */
    public Passengers update(Passengers passengers)throws FlightBookingException{
        return DaoFactory.passengersDao().update(passengers);
    }
    /**
     * Method getAll retrieves all records of passengers from the database.
     * @return a List of all passengers records.
     * @throws FlightBookingException when an error occurs during the retrieval operation.
     */
    public List<Passengers> getAll() throws FlightBookingException {
        return DaoFactory.passengersDao().getAll();
    }
    /**
     * Method getById retrieves a record of passengers with a specific ID from the database.
     * @param id the id of the passenger.
     * @return an instance of {@link Passengers} with the specific ID.
     * @throws FlightBookingException when an error occurs during the retrieval operation.
     */
    public Passengers getById(int id) throws FlightBookingException {
        return DaoFactory.passengersDao().getById(id);
    }

}
