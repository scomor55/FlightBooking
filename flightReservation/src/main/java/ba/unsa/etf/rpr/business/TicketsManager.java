package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Tickets;
import ba.unsa.etf.rpr.exceptions.FlightBookingException;
import ba.unsa.etf.rpr.controllers.UserPanelController;

import java.util.List;

/**
 * The `TicketsManager` class manages the CRUD operations for `Tickets` objects.
 * This class uses the `DaoFactory` to perform CRUD operations on `Tickets` objects.
 * It provides methods to add, delete, update, get all, and get by ID `Tickets` objects.
 * If any errors occur during these operations, a `FlightBookingException` is thrown with an error message.
 */
public class TicketsManager {
    /**
     * Adds a `Tickets` object to the database.
     * If the `ticket` object has a non-zero ID, a `FlightBookingException` is thrown with an error message.
     * Otherwise, the `add` method of the `ticketsDao` is called and the result is returned.
     * If an error occurs during this operation, a `FlightBookingException` is thrown with the error message.
     * @param ticket The `Tickets` object to be added.
     * @return The added `Tickets` object.
     * @throws FlightBookingException If the `ticket` object has a non-zero ID or an error occurs during the add operation.
     */
    public Tickets add(Tickets ticket)throws FlightBookingException{
        if(ticket.getId() != 0){
            throw new FlightBookingException("Can't add category with ID. ID is autogenerated");
        }
        try {
            return  DaoFactory.ticketsDao().add(ticket);
        }catch (FlightBookingException t){
            throw t;
        }
    }
    /**
     * Deletes a `Tickets` object from the database.
     * The `delete` method of the `ticketsDao` is called with the provided `ticketId`.
     * If a `FlightBookingException` is thrown during this operation and its error message contains "FOREIGN KEY",
     * a new `FlightBookingException` is thrown with a custom error message.
     * Otherwise, the caught `FlightBookingException` is thrown.
     * @param ticketId The ID of the `Tickets` object to be deleted.
     * @throws FlightBookingException If an error occurs during the delete operation, or if the `ticket` object is related to quotes.
     */
    public void delete(int ticketId)throws FlightBookingException{
        try {
            DaoFactory.ticketsDao().delete(ticketId);
        }catch(FlightBookingException f){
            if(f.getMessage().contains("FOREIGN KEY")){
                throw new FlightBookingException("Cannot delete category which is related to quotes. First delete related quotes before deleting category.");
            }
            throw f;
        }
    }

    /**
     * Updates a `Tickets` object in the database.
     * The `update` method of the `ticketsDao` is called with the provided `ticket` object.
     * The result of this method is returned.
     * @param ticket The updated `Tickets` object.
     * @return The updated `Tickets` object.
     * @throws FlightBookingException If an error occurs during the update operation.
     */
    public Tickets update(Tickets ticket)throws FlightBookingException{
        return DaoFactory.ticketsDao().update(ticket);
    }
    /**
     * Retrieves all the {@link Tickets} objects from the database.
     * @return a List of {@link Tickets} objects.
     * @throws FlightBookingException if an error occurs during database access.
     */
    public List<Tickets> getAll() throws FlightBookingException {
        return DaoFactory.ticketsDao().getAll();
    }
    /**
     * Retrieves a {@link Tickets} object from the database, given its ID.
     * @param id the ID of the {@link Tickets} object to retrieve.
     * @return the {@link Tickets} object with the given ID.
     * @throws FlightBookingException if an error occurs during database access.
     */
    public Tickets getById(int id) throws FlightBookingException {
        return DaoFactory.ticketsDao().getById(id);
    }

}
