package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.FlightsDaoSQLImpl;
import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Flights;
import ba.unsa.etf.rpr.exceptions.FlightBookingException;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.time.LocalDate;

public class FlightsManagerTest {

    private FlightsManager flightsManager;
    private Flights flights;

    @BeforeEach
    public void initializeObjectsWeNeed(){
        flightsManager = new FlightsManager();
        flights = new Flights();
        flights.setSource("Sarajevo");
        flights.setDestination("Dublin");
        flights.setDeparture(LocalDate.parse("2022-12-09"));
        flights.setDepartureTime("12:00 PM");
        flights.setArrival(LocalDate.parse("2022-12-09"));
        flights.setArrivalTime("3:00 PM");
        flights.setSeats(156);
        flights.setPriceEconomy(400);
        flights.setPriceBusiness(1000);
    }

    /**
     * We are testing add() method. An explanation will be covered in the comments below
     */

    @Test
    void add(){
        FlightsDaoSQLImpl flightsDaoSQL = Mockito.mock(FlightsDaoSQLImpl.class);
        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);

        daoFactoryMockedStatic.when(DaoFactory::flightsDao).thenReturn(flightsDaoSQL);

        FlightBookingException flightBookingException = Assertions.assertThrows(FlightBookingException.class, () ->{
            flightsManager.add(flights);
        },"Can't add category with ID. ID is autogenerated");
        Assertions.assertEquals("Can't add category with ID. ID is autogenerated",flightBookingException.getMessage());
        flights.setId(0);

        try{
            flightsManager.add(flights);
        }catch(FlightBookingException f){
            throw new RuntimeException();
        }

        daoFactoryMockedStatic.verify(DaoFactory::flightsDao);
        daoFactoryMockedStatic.close();
    }
}
